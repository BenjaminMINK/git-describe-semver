// Generated by CoffeeScript 1.9.1
(function() {
  var argsParser, debug, fail, isValidBump, main, mapChangesToBumplevel, parseGitDescription, removePrefix, semver, semverFormatFull, semverFromGitDescribe;

  semver = require('semver');

  argsParser = require('minimist');

  debug = false;

  semverFromGitDescribe = function(gitDescription, bump, tagPrefix) {
    var fallbackVersion, input, new_semver, parsed, preReleaseChannel, strict;
    if (bump == null) {
      bump = 'patch';
    }
    fallbackVersion = '1.0.0';
    preReleaseChannel = 'alpha';
    if (!isValidBump) {
      fail("`bump` must be one of " + (validBumps.join(', ')));
    }
    input = removePrefix(gitDescription, tagPrefix, (strict = tagPrefix != null));
    parsed = parseGitDescription(input, fallbackVersion);
    new_semver = (function() {
      var bumpLevel;
      if (!parsed.isAhead) {
        return parsed.semver;
      }
      bumpLevel = (function() {
        var ref;
        if (((ref = parsed.semver.prerelease) != null ? ref.length : void 0) > 0) {
          if (typeof parsed.semver.prerelease[0] === 'string') {
            preReleaseChannel = parsed.semver.prerelease[0];
          }
          return 'prerelease';
        }
        return "pre" + bump;
      })();
      return semver(parsed.semver.raw).inc(bumpLevel, preReleaseChannel);
    })();
    new_semver = semver.parse(new_semver.version + "+" + parsed.gitmeta);
    return {
      raw: gitDescription,
      parsed: parsed,
      SemVer: new_semver,
      version: semverFormatFull(new_semver)
    };
  };

  semverFormatFull = function(semverObj) {
    var ref, res;
    if ((typeof semverObj.format) !== 'function') {
      fail('no semver object to format!');
    }
    res = semverObj.format();
    if (((ref = semverObj.build) != null ? ref.length : void 0)) {
      res += '+' + semverObj.build.join('.');
    }
    return res;
  };

  parseGitDescription = function(string, fallbackVersion) {
    var ahead, gitmeta, hash, parsed, ref, regex, res, splitted, version;
    regex = /^\s?(\d+.\d+.\d+(?:[A-Za-z\d\.\-]+)?)-(\d+)-(g[0-9a-f]+)\s?$/;
    ref = (splitted = regex.exec(string)) != null ? splitted : (/[0-9a-f]+/.test(string) ? hash = string : void 0, [true, fallbackVersion, 1, "g" + hash]), res = ref[0], version = ref[1], ahead = ref[2], gitmeta = ref[3];
    if (!((res != null) && (version != null) && (ahead != null) && (gitmeta != null))) {
      fail('git-description invalid! Is it `--long` and prefix-free?');
    }
    parsed = {
      semver: semver.parse(version),
      isAhead: ahead > 0,
      gitmeta: gitmeta != null ? gitmeta : void 0
    };
    return parsed;
  };

  isValidBump = function(bump) {
    return ['major', 'minor', 'patch'].map(function(validBump) {
      return bump === validBump;
    }).reduce(function(bool, res) {
      return res || bool;
    });
  };

  mapChangesToBumplevel = function(string) {
    var map;
    map = {
      breaking: 'major',
      feature: 'minor',
      bugfix: 'patch'
    };
    if (map[string] != null) {
      return map[string];
    }
  };

  removePrefix = function(string, prefix, strict) {
    if (prefix == null) {
      prefix = 'v';
    }
    if (strict == null) {
      strict = false;
    }
    if (!(typeof string === 'string' && typeof prefix === 'string')) {
      fail('args! `string` and `prefix` must be strings!');
    }
    if (string.indexOf(prefix) === 0) {
      return string.slice(prefix.length);
    } else {
      if (strict) {
        fail('prefix not present at start of string!');
      }
      return string;
    }
  };

  fail = function(msg) {
    console.error('ERROR! ' + msg);
    return process.exit(1);
  };

  debug = function(msg) {
    if (debug) {
      return console.error(msg);
    }
  };

  (main = function() {
    var args, bump, describe, ref, result;
    args = argsParser(process.argv.slice(2));
    describe = ((ref = args._) != null ? ref[0] : void 0) || args.describe;
    bump = (function() {
      switch (false) {
        case args.bump == null:
          return args.bump;
        case args.change == null:
          return mapChangesToBumplevel(args.change);
      }
    })();
    if (describe == null) {
      fail('missing input! hint: `--describe="1.0.0-0-g1234abcd"`');
    }
    result = semverFromGitDescribe(describe, bump, args.prefix);
    if (args.json) {
      return console.log(JSON.stringify(result.SemVer, 0, 2));
    } else {
      return console.log(result.version);
    }
  })();

}).call(this);
